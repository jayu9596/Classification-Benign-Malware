import json
import pickle
import os
import sys
import pandas as pd
import numpy as np


# Get Count for particular attribute in Json object
def get_count(_summary, attribute):
    cnt = 0
    if attribute in _summary:
        cnt = len(_summary[attribute])
    return cnt


# returns list with count of files read/written/deleted, etc.
def get_list(_summary):
    return [get_count(_summary, 'file_created'), get_count(_summary, 'file_deleted'),
            get_count(_summary, 'file_written'),
            get_count(_summary, 'directory_created'), get_count(_summary, 'regkey_opened'),
            get_count(_summary, 'dll_loaded'), get_count(_summary, 'resolves_host')]


# Create and returns features list for provided json files
def predict(files):
    # For Extracting information about files
    csv_ans = []
    # Debugging purpose
    counter = 0
    # Get all the files in current path
    for file in files:

        # Measuring Progress
        counter += 1
        if counter % 100 == 0:
            print(str(counter) + '\n')

        # Open current file
        with open(file) as f:
            data = json.load(f)

        # row variable will contain feature representation of current file
        row = []

        # To handle any exceptions caused
        try:
            if 'summary' in data['behavior']:
                summary = data['behavior']['summary']

                # Add current file details to features list
                row = get_list(summary)

                # Add Virus Total positives as feature
                if 'virustotal' in data:
                    virustotal = data['virustotal']
                    if 'positives' in virustotal:
                        row.append(virustotal['positives'])
                    else:
                        row.append(0)
                else:
                    row.append(0)

                # Add dll as features
                if 'dll_loaded' in summary:
                    # Strip path (prefix) , '.dll' (suffix) and convert dll name to lowercase
                    # Also create set, so no dll is counted more than once
                    dll_set = set([dll.split('\\')[-1].split('/')[-1].lower() for dll in summary['dll_loaded']])
                    dll_dict = c = dict.fromkeys(dll_set, 0)
                    for dll in dll_names:
                        if dll in dll_dict:
                            row.append(1)
                        else:
                            row.append(0)
                else:
                    for dll in dll_names:
                        row.append(0)
        except:
            print('Error handled while creating feature representation for file ' + file.split('\\')[-1] + '\n')
            row = []
            for i in range(len(dll_names) + 8):
                row.append(0)

        # Predict Benign/Malware for current file
        file_hash = file.split('\\')[-1][:-5]
        row = np.array(row)
        y_pred = loaded_model.predict([row])
        if y_pred[0] == 0:
            file_hash = file_hash + ',B'
        else:
            file_hash = file_hash + ',M'

        # Append prediction to list
        csv_ans.append(file_hash)
    return csv_ans


# get all json files
def get_all_json_files():
    files = []
    for r, d, f in os.walk(folder_path):
        for file in f:
            if file.endswith('.json'):
                files.append(os.path.join(r, file))
    return files


def get_dll_feature(count):
    map_dll = np.array(pd.read_csv('Constants\\Dll_Features.csv'))
    names_dll = map_dll[:, [0]]
    if len(names_dll) < count:
        count = len(names_dll)
    names_dll = names_dll[: count]
    return names_dll[:, 0]


'''
# Feature List representation
1. Benign/Malware -> 0/1
2. #FilesCreated -> count
3. #FilesDeleted -> count
4. #FilesWritten -> count
5. #DirCreated -> count
6. #RegKeyOpened -> count
7. #DLLsImported -> count
8. VirusTotal positives -> count
9...200 DLL name -> 0/1
'''

if len(sys.argv) != 2:
    print("Enter directory path as argument")
    print(
        "Example (quotes included):\npython dynamic.py \"C:\\Users\\XXXX\\\\Desktop\\SEM 2\\Malware\\Data\\Dynamic_Analysis_RAWDATA\"\n")
    sys.exit(1)

folder_path = sys.argv[1]

output_file = 'dynamic.csv'
json_files = get_all_json_files()

top_n = 192
dll_names = get_dll_feature(top_n)

modelname = 'Constants\dynamic.jd'
loaded_model = pickle.load(open(modelname, 'rb'))

ans_csv = predict(json_files)

file = open(output_file, 'w')
file.write('File_Hash,Predicted Label\n')
for hash_y_pred in ans_csv:
    file.write(hash_y_pred + '\n')
file.close()
