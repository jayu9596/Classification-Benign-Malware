from os import listdir
import os
from os.path import isfile, join
import json
import pandas as pd
import numpy as np
import csv
import operator

# For Listing all Json Files

# mypath = path.replace('\\','\\\\')
# print(mypath + "\n")


'''
features List representation
1. Benign/Malware -> 0/1
2. #FilesCreated
3. #FilesDeleted
4. #FilesWritten
5. #DirCreated
6. #RegKeyOpened
7. #DLLsImported
8...150 -> DLLs Name
'''


# print(data)


# Get Count for particular attribute in Json object
def get_count(_summary, attribute):
    cnt = 0
    if attribute in _summary:
        cnt = len(_summary[attribute])
    return cnt


def get_list(_summary):
    return [get_count(_summary, 'file_created'), get_count(_summary, 'file_deleted'),
            get_count(_summary, 'file_written'),
            get_count(_summary, 'directory_created'), get_count(_summary, 'regkey_opened'),
            get_count(_summary, 'dll_loaded'), get_count(_summary, 'resolves_host')]


# Create and returns features list for using json files in folder
def get_features(path):
    # For Extracting information about files
    features = []
    # Get all the files in current path
    all_files = [join(path, f) for f in listdir(path) if isfile(join(path, f))]
    for file in all_files:
        with open(file) as f:
            data = json.load(f)
        if 'summary' in data['behavior']:
            summary = data['behavior']['summary']
            # Add current file details to features list
            row = get_list(summary)
            main_file = open(curr_file, 'a')
            for val in row:
                main_file.write(str(val) + ',')
            main_file.write('\n')
            main_file.close()
            # Update dll_map count
            if 'dll_loaded' in summary:
                # Strip path (prefix) , '.dll' (suffix) and convert dll name to lowercase
                # Also create set, so no dll is counted more than once
                dll_set = set([dll.split('\\')[-1].split('/')[-1].lower() for dll in summary['dll_loaded']])
                dll_dict = c = dict.fromkeys(dll_set, 0)
                for dll in dll_names:
                    if dll in dll_dict:
                        row.append(1)
                    else:
                        row.append(0)
                # for dll in dll_names:
                #     for this_dll in dll_set:
                #         if dll == this_dll:
                #             row.append(1)
                #         else:
                #             row.append(0)
                for dll in dll_set:
                    if dll.endswith('.dll'):
                        curr_dll_set.update([dll])
                        if dll in dll_map:
                            dll_map[dll] += 1
                        else:
                            dll_map[dll] = 1
            else:
                for dll in dll_names:
                    row.append(0)
            features.append(row)
    return features


def save_to_file(param, features):
    df = pd.DataFrame({
        'Benign/Malware': np.zeros(features.shape[0]) if param == 0 else np.ones(features.shape[0]),
        '#FilesCreated': features[:, 0],
        '#FilesDeleted': features[:, 1],
        '#FilesWritten': features[:, 2],
        '#DirCreated': features[:, 3],
        '#RegKeyOpened': features[:, 4],
        '#DLLsImported': features[:, 5],
        '#URLsResolved': features[:, 6],
    })
    features = np.delete(features, [0, 1, 2, 3, 4, 5, 6], axis=1)
    df2 = pd.DataFrame(features)
    df = pd.concat([df, df2], axis=1)
    df.to_csv('benign.csv' if param == 0 else 'malware.csv', index=False)


def remove_csv_files():
    current_dir = os.getcwd()
    file_list = [f for f in os.listdir(current_dir) if f.endswith(".csv")]
    for f in file_list:
        os.remove(os.path.join(current_dir, f))


def get_dll_feature():
    names = np.array(pd.read_csv('Backup\\total_dll_features.csv'))
    # count_dll = map_dll[:, [1]]
    # name_dll = map_dll[:, [0]]
    # condition = count_dll > min_dll_count
    # names = name_dll[condition]
    return list(names[:, 0])


dll_map = {}
folder_path = 'C:\\Users\JAYU\Desktop\IIT Kanpur MTech\SEM 2\Malware\Mid-Term-Data\Data\Dynamic_Analysis_RAWDATA\Dynamic_Analysis_RAWDATA\\'
# folder_path = 'C:\\Users\JAYU\Desktop\IIT Kanpur MTech\SEM 2\Malware\Mid-Term-Data\Data\Dynamic_Analysis_RAWDATA\Dummy\\'

remove_csv_files()

min_dll_count = 100
dll_names = get_dll_feature()
curr_file = 'benign_file.csv'
curr_dll_set = set()
benign_features = np.array(get_features(folder_path + 'Benign'))
benign_dll_set = curr_dll_set
# dll_map_benign = dict(sorted(dll_map.items(), key=operator.itemgetter(1), reverse=True))
# print(dll_map_benign)
# with open('DLL_Map_Benign.csv', 'w') as dll_file:
#     for key in dll_map_benign.keys():
#         dll_file.write("%s,%d\n" % (key, dll_map_benign[key]))

curr_file = 'malware_file.csv'
curr_dll_set = set()
malware_backdoor = np.array(get_features(folder_path + 'Malware\Backdoor\\'))
malware_trojan = np.array(get_features(folder_path + 'Malware\Trojan\\'))
malware_trojan_downloader = np.array(get_features(folder_path + 'Malware\TrojanDownloader\\'))
malware_trojan_dropper = np.array(get_features(folder_path + 'Malware\TrojanDropper\\'))
malware_virus = np.array(get_features(folder_path + 'Malware\Virus\\'))
malware_worm = np.array(get_features(folder_path + 'Malware\Worm\\'))
malware_dll_set = curr_dll_set

total_dll_features = (benign_dll_set - malware_dll_set) | (malware_dll_set - benign_dll_set)

# dll_map = dict(sorted(dll_map.items(), key=operator.itemgetter(1), reverse=True))
# print(dll_map)
with open('total_dll_features.csv', 'w') as ff:
    for item in total_dll_features:
        ff.write("%s\n" % item)

'''
print(malware_backdoor)
print('\n')
print(malware_trojan)
print('\n')
print(malware_trojan_downloader)
print('\n')
print(malware_trojan_dropper)
print('\n')
print(malware_virus)
print('\n')
print(malware_worm)
print('\n')
'''

malware_features = np.concatenate(
    (malware_backdoor, malware_trojan, malware_trojan_downloader, malware_trojan_dropper, malware_virus, malware_worm))

save_to_file(0, benign_features)
save_to_file(1, malware_features)
# print(benign_features)


# print(features)
# print('\n')
# print(dll_map)

# print(onlyfiles)
