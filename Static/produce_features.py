import operator
import re
from os import listdir
import os
from os.path import isfile, join
import json
from typing import List
import csv
import pandas as pd
import numpy as np


def remove_csv_files():
    current_dir = os.getcwd()
    file_list = [f for f in os.listdir(current_dir + '\\Features') if f.endswith(".csv")]
    for f in file_list:
        os.remove(os.path.join(current_dir + '\\Features', f))


def get_dll_feature(count):
    dll_map = np.array(pd.read_csv('Constants\\DLL_Map.csv'))
    dll_names = dll_map[:, [0]]
    if len(dll_names) < count:
        count = len(dll_names)
    dll_names = dll_names[: count]
    return dll_names[:, 0]


def get_header_feature():
    header_list = np.array(pd.read_csv('Constants\\PEHeader.csv'))
    return header_list[:, 0]


def get_map_dll(sub_path):
    files = []
    # r=root, d=directories, f = files
    map_dll_function = {}
    counter = 0
    regex = re.compile('[@!#$%^&*()<>?/\|}{~:]')
    for r, d, f in os.walk(folder_path + sub_path.strip()):
        for file in f:
            # Debugging purposes
            counter += 1
            if counter % 100 == 0:
                print(str(counter) + '\n')
            if counter == 1080:
                print(counter)
            if 'Structure_Info.txt' == file:
                files.append(os.path.join(r, file))
                curr_file = open(os.path.join(r, file), 'r', encoding='utf8', errors='ignore')
                lines = curr_file.readlines()
                for line in lines:
                    curr_line = str(line).lower()
                    if '.dll.' in curr_line:
                        dll_function = curr_line.split(' ')[0].strip()
                        if regex.search(dll_function) is not None:
                            continue
                        if dll_function in map_dll_function:
                            map_dll_function[dll_function] += 1
                        else:
                            map_dll_function[dll_function] = 0
    return map_dll_function


def get_features(sub_path):
    files = []
    # r=root, d=directories, f = files
    feature_list = []
    counter = 0
    regex = re.compile('[@!#$%^&*()<>?/\|}{~:]')
    for r, d, f in os.walk(folder_path + sub_path.strip()):
        for file in f:
            # Debugging purposes
            counter += 1
            if counter % 100 == 0:
                print(str(counter) + ' Features \n')
            set_dll_function = set()
            row = []
            if 'Structure_Info.txt' == file:
                files.append(os.path.join(r, file))
                curr_file = open(os.path.join(r, file), 'r', encoding='utf8', errors='ignore')
                lines = curr_file.readlines()
                for line in lines:
                    if 'highlow' in line.lower():
                        break
                    curr_line = str(line).lower()
                    if '.dll.' in curr_line:
                        dll_function = curr_line.split(' ')[0].strip()
                        if regex.search(dll_function) is not None:
                            continue
                        dll_function = {dll_function}
                        set_dll_function.update(dll_function)
                dict_dll = dict.fromkeys(set_dll_function, 0)
                if sub_path == 'Benign':
                    row.append(0)
                elif sub_path == 'Malware':
                    row.append(1)
                else:
                    row.append(-1)
                for dll_function in feature_map_dll:
                    if dll_function in dict_dll:
                        row.append(1)
                    else:
                        row.append(0)

                # For New Features
                curr_file_1 = open(os.path.join(r, file), 'r', encoding='utf8', errors='ignore')
                lines_1 = curr_file_1.readlines()
                map_header_value = {}
                for line_1 in lines_1:
                    if 'highlow' in line.lower():
                        break
                    line_1 = line_1.split()
                    if len(line_1) == 4:
                        if line_1[2] in feature_map_header:
                            try:
                                map_header_value[line_1[2]] = int(line_1[3][2:], 16)
                            except:
                                print('Error Converting from string to int')
                for feature_1 in feature_map_header:
                    if feature_1 in map_header_value:
                        row.append(map_header_value[feature_1])
                    else:
                        row.append(0)

            # Add current row to final list
            if len(row) != 0:
                feature_list.append(row)

    return feature_list


def save_to_file(file_name, feature):
    with open(file_name, "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerows([list(['Output']) + list(feature_map_dll) + list(feature_map_header)])
        for row in feature:
            writer.writerows([row])


# Main Stars Here
# Global Variables
map_dll = {}
# folder_path = 'C:\\Users\JAYU\Desktop\IIT Kanpur MTech\SEM 2\Malware\Mid-Term-Data\Data\Static_Analysis_RAWDATA\Dummy\\'
folder_path = 'D:\\Static_Analysis_RAWDATA\Static_Analysis_RAWDATA\\'
# Remove OLD csv files
remove_csv_files()

# map_dll = get_map_dll('')

# map_dll = dict(sorted(map_dll.items(), key=operator.itemgetter(1), reverse=True))
# with open('Constants\DLL_Map.csv', 'w') as map_file:
#     for key in map_dll.keys():
#         map_file.write("%s,%d\n" % (key, map_dll[key]))

top_n = 950

feature_map_dll = get_dll_feature(top_n)
feature_map_header = get_header_feature()

benign_features = np.array(get_features('Benign'))
malware_features = np.array(get_features('Malware'))
features = np.concatenate((benign_features, malware_features))

save_to_file('Features\\Benign.csv', benign_features)
save_to_file('Features\\Malware.csv', malware_features)
save_to_file('Features\\Features.csv', features)

# with open("Features\\features.csv", "w", newline="") as f:
#     writer = csv.writer(f)
#     writer.writerows([list(['Output']) + list(feature_map_dll)])
#     for row in features:
#         writer.writerows([row])
