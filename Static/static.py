import pickle
import os
import re
import sys
import pandas as pd
import numpy as np


# Return all json files present in current path
def get_dirs():
    dirs = []
    # r=root, d=directories, f = files
    for r, d, f in os.walk(folder_path):
        for directory in d:
            dirs.append(os.path.join(r, directory))
    return dirs


# Returns all APIs which are to be used as features
def get_dll_feature(count):
    dll_map = np.array(pd.read_csv('Constants\\DLL_Map.csv'))
    dll_names = dll_map[:, [0]]
    if len(dll_names) < count:
        count = len(dll_names)
    dll_names = dll_names[: count]
    return dll_names[:, 0]


# Return csv list after predicting for a file present in all directories passed as argument
def predict(dirs):
    # csv_ans will store prediction for every file
    csv_ans = []
    structure_info = '\\Structure_Info.txt'
    regex = re.compile('[@!#$%^&*()<>?/\|}{~:]')
    for directory in dirs:

        # row will have feature representation for current file
        row = []
        set_dll_function = set()

        # Append Structure_Info.txt to path to get file name
        file_name = directory + structure_info

        # Check if file exists
        if os.path.isfile(file_name):
            curr_file = open(file_name, 'r', encoding='utf8', errors='ignore')
            lines = curr_file.readlines()

            # Create set of words where .dll. is present
            # if contains any special characters, ignore those words
            for line in lines:
                curr_line = str(line).lower()
                if '.dll.' in curr_line:
                    dll_function = curr_line.split(' ')[0].strip()
                    if regex.search(dll_function) is not None:
                        continue
                    dll_function = {dll_function}
                    set_dll_function.update(dll_function)
            dict_dll = dict.fromkeys(set_dll_function, 0)

            # Add features for APIs
            for dll_function in feature_map_dll:
                if dll_function in dict_dll:
                    row.append(1)
                else:
                    row.append(0)

            # Add features for PE Header
            curr_file_1 = open(file_name, 'r', encoding='utf8', errors='ignore')
            lines_1 = curr_file_1.readlines()
            map_header_value = {}
            for line_1 in lines_1:
                if 'highlow' in line.lower():
                    break
                line_1 = line_1.split()
                if len(line_1) == 4:
                    if line_1[2] in feature_map_header:
                        try:
                            map_header_value[line_1[2]] = int(line_1[3][2:], 16)
                        except:
                            print('Error handled generated from converting string to int')
            for feature_1 in feature_map_header:
                if feature_1 in map_header_value:
                    row.append(map_header_value[feature_1])
                else:
                    row.append(0)
        else:
            # If file is not present
            for i in range(len(feature_map_dll) + len(feature_map_header)):
                row.append(0)

        # Predict Benign/Malware and store value in csv_ans
        file_hash = file_name.split('\\')[-2]
        row = np.array(row)
        y_pred = loaded_model.predict([row])
        hash_pred = ''
        if y_pred[0] == 0:
            hash_pred = file_hash + ',B'
        else:
            hash_pred = file_hash + ',M'
        csv_ans.append(hash_pred)

    return csv_ans


# Returns all PE Headers which are to be used as features
def get_header_feature():
    header_list = np.array(pd.read_csv('Constants\\PEHeader.csv'))
    return header_list[:, 0]


'''
# Feature List representation
1..950 DLL name -> 0/1
950..985 -> PEHeader -> size/count
'''

# Check if Arguments are passed correctly
if len(sys.argv) != 2:
    print("Enter directory path as argument")
    print(
        "Example (quotes included):\npython static.py \"C:\\Users\\XXXX\\\\Desktop\\SEM 2\\Malware\\Data\\Static_Analysis_RAWDATA\"\n")
    sys.exit(1)

folder_path = sys.argv[1]

output_file = 'static.csv'

# total features as API
top_n = 950
feature_map_dll = get_dll_feature(top_n)

# Retrieve all PE Header features from file
feature_map_header = get_header_feature()

# Get All directories present in current path
dir_list = get_dirs()

# Load model
model_name = 'Constants\static.jd'
loaded_model = pickle.load(open(model_name, 'rb'))

# Predict for all files
csv_ans = predict(dir_list)

# Store result in output file
file = open(output_file, 'w')
file.write('File_Hash,Predicted Label\n')
for hash_y_pred in csv_ans:
    file.write(hash_y_pred + '\n')
file.close()

'''
Accuracy: 0.98984375
Precision: 0.9968178202068417
Recall: 0.9827450980392157
Score: 0.9897314375987363
'''
