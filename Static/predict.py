import pickle
import os
import re
import sys

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier


def get_dirs():
    dirs = []
    # r=root, d=directories, f = files
    for r, d, f in os.walk(folder_path):
        for directory in d:
            dirs.append(os.path.join(r, directory))
    return dirs


def get_dll_feature(count):
    dll_map = np.array(pd.read_csv('Constants\\DLL_Map.csv'))
    dll_names = dll_map[:, [0]]
    if len(dll_names) < count:
        count = len(dll_names)
    dll_names = dll_names[: count]
    return dll_names[:, 0]


def predict(dirs):
    # r=root, d=directories, f = files
    sum = 0
    feature_list = []
    structure_info = '\\Structure_Info.txt'
    regex = re.compile('[@!#$%^&*()<>?/\|}{~:]')
    for directory in dirs:
        row = []
        set_dll_function = set()
        file_name = directory + structure_info
        if os.path.isfile(file_name):
            curr_file = open(file_name, 'r', encoding='utf8', errors='ignore')
            lines = curr_file.readlines()
            for line in lines:
                curr_line = str(line).lower()
                if '.dll.' in curr_line:
                    dll_function = curr_line.split(' ')[0].strip()
                    if regex.search(dll_function) is not None:
                        continue
                    dll_function = {dll_function}
                    set_dll_function.update(dll_function)
            dict_dll = dict.fromkeys(set_dll_function, 0)
            row = []
            for dll_function in feature_map_dll:
                if dll_function in dict_dll:
                    row.append(1)
                else:
                    row.append(0)
        else:
            for i in range(len(feature_map_dll)):
                row.append(0)
        feature_list.append(row)
        file_hash = file_name.split('\\')[-2]
        row = np.array(row)
        y_pred = loaded_model.predict([row])
        sum += y_pred
        file = open(output_file, 'a')
        if y_pred[0] == 0:
            file.write(file_hash + ',B\n')
        else:
            file.write(file_hash + ',M\n')
        file.close()
    print(sum)
    return feature_list


if len(sys.argv) != 2:
    print("Enter directory path as argument\n")
    exit(1)

# folder_path = os.getcwd()
folder_path = sys.argv[1]

output_file = 'static.csv'
top_n = 500
feature_map_dll = get_dll_feature(top_n)

dir_list = get_dirs()

# if os.path.exists(output_file):
#     os.remove(output_file)

file = open(output_file, 'w')
file.write('File_Hash,Predicted Label\n')
file.close()

model_name = 'Constants\static.jd'
loaded_model = pickle.load(open(model_name, 'rb'))

f_list = predict(dir_list)

y_pred = loaded_model.predict(f_list)

file = open('Features\y_pred.csv', 'w')
file.write('File_Hash,Predicted Label\n')
for pred in y_pred:
    file.write(str(pred)+'\n')
file.close()

'''
Accuracy: 0.98984375
Precision: 0.9968178202068417
Recall: 0.9827450980392157
Score: 0.9897314375987363
'''
