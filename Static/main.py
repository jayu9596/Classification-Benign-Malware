import operator
from os import listdir
import os
from os.path import isfile, join
import json
from typing import List
import csv
import pandas as pd
import numpy as np


def remove_csv_files():
    current_dir = os.getcwd()
    file_list = [f for f in os.listdir(current_dir + '\\Features') if f.endswith(".csv")]
    for f in file_list:
        os.remove(os.path.join(current_dir + '\\Features', f))


def get_dll_feature(count):
    dll_map = np.array(pd.read_csv('Features\\DLL_Map.csv'))
    dll_names = dll_map[:, [0]]
    if len(dll_names) < count:
        count = len(dll_names)
    return dll_names[: count]


def get_map_dll(sub_path):
    files = []
    # r=root, d=directories, f = files
    map_dll_function = {}
    counter = 0
    for r, d, f in os.walk(folder_path + sub_path.strip()):
        for file in f:
            # Debugging purposes
            counter += 1
            if counter % 100 == 0:
                print(str(counter) + '\n')
            if counter == 1080:
                print(counter)
            if 'Structure_Info.txt' == file:
                files.append(os.path.join(r, file))
                curr_file = open(os.path.join(r, file), 'r', encoding='utf8', errors='ignore')
                lines = curr_file.readlines()
                for line in lines:
                    curr_line = str(line).lower()
                    if '.dll.' in curr_line:
                        dll_function = curr_line.split(' ')[0].strip()
                        if dll_function in map_dll_function:
                            map_dll_function[dll_function] += 1
                        else:
                            map_dll_function[dll_function] = 0
    return map_dll_function


def get_features(sub_path):
    files = []
    # r=root, d=directories, f = files
    feature_list = []
    counter = 0
    for r, d, f in os.walk(folder_path + sub_path.strip()):
        row = []
        for file in f:
            # found = 0
            # Debugging purposes
            counter += 1
            if counter % 100 == 0:
                print(str(counter) + ' Features \n')
            set_dll_function = set()
            if 'Structure_Info.txt' == file:
                # found = 1
                files.append(os.path.join(r, file))
                curr_file = open(os.path.join(r, file), 'r', encoding='utf8', errors='ignore')
                lines = curr_file.readlines()
                for line in lines:
                    curr_line = str(line).lower()
                    if '.dll.' in curr_line:
                        dll_function = curr_line.split(' ')[0].strip()
                        dll_function = {dll_function}
                        set_dll_function.update(dll_function)
                dict_dll = dict.fromkeys(set_dll_function, 0)
                if sub_path == 'Benign':
                    row.append(0)
                else:
                    row.append(1)
                for dll_function in feature_map_dll:
                    if dll_function[0] in dict_dll:
                        row.append(1)
                    else:
                        row.append(0)
        # if 0 == found:
        #     for i in range(len(feature_map_dll)):
        #         row.append(0)
        if row:
            feature_list.append(row)
    return feature_list


# Main Stars Here
# Global Variables
map_dll = {}
# folder_path = 'C:\\Users\JAYU\Desktop\IIT Kanpur MTech\SEM 2\Malware\Mid-Term-Data\Data\Static_Analysis_RAWDATA\Dummy\\'
folder_path = 'D:\\Static_Analysis_RAWDATA\Static_Analysis_RAWDATA\\'
# Remove OLD csv files
remove_csv_files()

map_dll = get_map_dll('')

map_dll = dict(sorted(map_dll.items(), key=operator.itemgetter(1), reverse=True))
with open('Features\DLL_Map.csv', 'w') as map_file:
    for key in map_dll.keys():
        map_file.write("%s,%d\n" % (key, map_dll[key]))

top_n = 2000
feature_map_dll = get_dll_feature(top_n)

benign_features = np.array(get_features('Benign'))
malware_features = np.array(get_features('Malware'))

features = np.concatenate((benign_features, malware_features))

with open("Features\\features.csv", "w", newline="") as f:
    writer = csv.writer(f)
    writer.writerows([list(['Output']) + list(feature_map_dll[:, 0])])
    for row in features:
        writer.writerows([row])
